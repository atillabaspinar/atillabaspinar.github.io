{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/services/corona-api.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAyC;AACc;;;AAGvD,MAAM,MAAM,GAAW,EAAE,CAAC;AAMnB,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7B,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;;ICsCxC,qEACE;IAAA,qEAAI;IAAA,kEAAO;IAAA,4DAAK;IAChB,qEAAI;IAAA,0EAAe;IAAA,4DAAK;IACxB,qEAAI;IAAA,0EAAe;IAAA,4DAAK;IACxB,qEAAI;IAAA,uEAAY;IAAA,4DAAK;IACrB,qEAAI;IAAA,yEAAa;IAAA,4DAAK;IACtB,sEAAI;IAAA,yEAAa;IAAA,4DAAK;IACtB,sEAAI;IAAA,sEAAU;IAAA,4DAAK;IACrB,4DAAK;;;IAGL,yEACE;IAAA,qEACE;IAAA,oFAA6D;IAC7D,uDACF;IAAA,4DAAK;IACL,qEAAI;IAAA,uDAAqB;IAAA,4DAAK;IAC9B,qEAAI;IAAA,uDAAqB;IAAA,4DAAK;IAC9B,qEAAI;IAAA,uDAAkB;IAAA,4DAAK;IAC3B,sEAAI;IAAA,wDAA+C;IAAA,4DAAK;IACxD,sEAAI;IAAA,wDAA+C;IAAA,4DAAK;IACxD,sEAAI;IAAA,wDAAyC;IAAA,4DAAK;IACpD,4DAAK;;;;IAXD,uFAA2B;IAEP,0DAAmB;IAAnB,+EAAmB;IACvC,0DACF;IADE,oGACF;IACI,0DAAqB;IAArB,qFAAqB;IACrB,0DAAqB;IAArB,qFAAqB;IACrB,0DAAkB;IAAlB,kFAAkB;IAClB,0DAA+C;IAA/C,oJAA+C;IAC/C,0DAA+C;IAA/C,oJAA+C;IAC/C,0DAAyC;IAAzC,8IAAyC;;ADpDzD,8BAA8B;AAC9B,gBAAgB;AAChB,2BAA2B;AAC3B,oBAAoB;AACpB,wBAAwB;AACxB,IAAI;AAQG,MAAM,YAAY;IAmBvB,YAAoB,SAA2B;QAA3B,cAAS,GAAT,SAAS,CAAkB;QAlB/C,UAAK,GAAG,aAAa,CAAC;QAKtB,cAAS,GAAe,CAAC;gBACvB,IAAI,EAAE;oBACJ,aAAa,EAAE,UAAU,EAAE,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE;iBACpE;gBACD,KAAK,EAAE,MAAM;gBACb,QAAQ,EAAE,EAAE;gBACZ,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC;QAIH,WAAM,GAAe,EAAE,CAAC;IAE2B,CAAC;IAG7C,iBAAiB,CAAC,IAAgB,EAAE,EAAU;QACnD,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;YACvB,IAAK,IAAI,CAAC,IAAa,CAAC,aAAa,KAAK,EAAE,EAAE;gBAC5C,OAAO,IAAI,CAAC;aACb;iBAAM;gBACL,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC7C,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;oBACzD,IAAI,MAAM,EAAE;wBACV,OAAO,MAAM,CAAC;qBACf;iBACF;aACF;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAGD,QAAQ;QACN,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC,CAAC,KAAY,EAAE,EAAE;YAChD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,CAAC,CAAC,CAAC;QAGH,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,CAAC,MAAa,EAAE,EAAE;YAEtD,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;gBAC1B,IAAI,QAAQ,GAAG,CAAC,CAAC;gBACjB,IAAI,QAAQ,GAAG,CAAC,CAAC;gBACjB,IAAI,cAAc,CAAC;gBACnB,IAAI,QAAQ,CAAC;gBACb,IAAI,QAAQ,CAAC;gBACb,iCAAiC;gBACjC,KAAK,MAAM,QAAQ,IAAI,OAAO,CAAC,UAAU,EAAE;oBACzC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;oBACnC,IAAI,KAAK,GAAG,QAAQ,EAAE;wBACpB,QAAQ,GAAG,KAAK,CAAC;wBACjB,QAAQ,GAAG,QAAQ,CAAC;wBACpB,QAAQ,GAAG,QAAQ,CAAC;wBACpB,cAAc,GAAG,QAAQ,CAAC;wBAC1B,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;wBACxC,iDAAiD;qBAClD;iBACF;gBACD,OAAO;oBACL,aAAa,EAAE,OAAO,CAAC,aAAa;oBACpC,IAAI,EAAE,QAAQ;iBACf,CAAC;YAEJ,CAAC,CAAC,CAAC;YACH,6BAA6B;YAC7B,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,MAAc,EAAE,EAAE;gBAEnD,MAAM,SAAS,GAAW,EAAE,CAAC;gBAC7B,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;gBACrD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;gBAEhE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAChD,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;oBACtF,IAAI,OAAO,EAAE;wBACX,MAAM,IAAI,GAAa;4BACrB,IAAI,EAAE;gCACJ,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,aAAa;gCAC5C,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;gCACpC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM;gCAC9B,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;6BACrC;4BACD,QAAQ,EAAE,KAAK;4BACf,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,aAAa;4BACpC,QAAQ,EAAE,EAAE;yBACb,CAAC;wBACF,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAE5B,6BAA6B;wBAC7B,OAAO,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;wBACpD,OAAO,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;wBAC9C,OAAO,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;qBACrD;yBAAM;wBACL,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAE5D,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa,KAAK,OAAO,CAAC,aAAa,CAAC,CAAC;wBAEzE,4BAA4B;wBAC5B,QAAQ;wBACR,eAAe;wBACf,YAAY;wBACZ,eAAe;wBAEf,MAAM,IAAI,GAAa;4BACrB,IAAI,EAAE;gCACJ,aAAa,EAAE,OAAO,CAAC,aAAa;gCACpC,aAAa,EAAE,OAAO,CAAC,aAAa;gCACpC,SAAS,EAAE,OAAO,CAAC,SAAS;gCAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;gCACtB,SAAS,EAAE,OAAO,CAAC,SAAS;gCAC5B,WAAW,oBAAO,OAAO,CAAC,WAAW,CAAE;gCACvC,IAAI,oBAAO,MAAM,CAAC,IAAI,CAAE;6BACzB;4BACD,QAAQ,EAAE,KAAK;4BACf,KAAK,EAAE,OAAO,CAAC,aAAa;4BAC5B,QAAQ,EAAE,EAAE;yBACb,CAAC;wBACF,qBAAqB;wBACrB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACvC;iBACF;gBACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;YAC9C,CAAC,CAAC,CAAC;QAEL,CAAC,CAAC,CAAC;IAML,CAAC;IAED,UAAU,CAAC,KAAK;QAEd,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QACjD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YACpD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACpB,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YACpC,MAAM,SAAS,GAAG,EAAE,CAAC;YACrB,MAAM,SAAS,GAAG,EAAE,CAAC;YACrB,MAAM,MAAM,GAAG,EAAE,CAAC;YAClB,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,kCAAkC;YAClC,KAAK,MAAM,EAAE,IAAI,MAAM,EAAE;gBACvB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC5B,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC;gBACrC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC;gBACrC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;gBAC/B,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACf,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;aAC/B;YACD,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAGvD,MAAM,CAAC,GAAG,CAAC;oBACT,CAAC,EAAE,KAAK;oBACR,CAAC,EAAE,SAAS;oBACZ,IAAI,EAAE,SAAS;oBACf,IAAI,EAAE,WAAW;iBAClB,EAAE;oBACD,CAAC,EAAE,KAAK;oBACR,CAAC,EAAE,SAAS;oBACZ,IAAI,EAAE,SAAS;oBACf,IAAI,EAAE,WAAW;iBAClB;gBACD;oBACE,CAAC,EAAE,KAAK;oBACR,CAAC,EAAE,MAAM;oBACT,IAAI,EAAE,SAAS;oBACf,IAAI,EAAE,QAAQ;iBACf,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG;gBACb,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa;gBACpC,KAAK,EAAE;oBACL,KAAK,EAAE,MAAM;oBACb,QAAQ,EAAE,KAAK;oBACf,QAAQ,EAAE,KAAK;iBAChB;gBACD,KAAK,EAAE;oBACL,KAAK,EAAE,GAAG;oBACV,QAAQ,EAAE,KAAK;iBAChB;aACF,CAAC;YAEF,MAAM,MAAM,GAAG;gBACb,UAAU,EAAE,IAAI;gBAChB,cAAc,EAAE,KAAK;aACtB,CAAC;YAEF,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QAE5C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,YAAY,CAAC,KAAK;IAElB,CAAC;;wEA9MU,YAAY;4FAAZ,YAAY;QCpBzB,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,kFACF;QAAA,4DAAM;QACN,yEACE;QAAA,wEAAgC;QAAA,uDAAqC;QAAA,4DAAK;QAC1E,yEAAgC;QAAA,wDAAyB;QAAA,4DAAK;QAC9D,yEAAgC;QAAA,wDAA+B;QAAA,4DAAK;QACtE,4DAAM;QACR,4DAAM;QAEN,0EACE;QAAA,0EACE;QAAA,wGACF;QAAA,4DAAM;QAEN,qEAEM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QAKN,4EAA+B;QACjC,4DAAM;QACN,0EACE;QAAA,0EACE;QAAA,mFAGE;QAHsD,iMAA4B,sGAC1C,sBAAkB,IADwB,0GACJ,wBAAoB,IADhB;QAGlF,4HACE;QAUF,4HACE;QAaJ,4DAAc;QAChB,4DAAM;QACR,4DAAM;QACR,4DAAM;;QAxDsC,0DAAqC;QAArC,0IAAqC;QACrC,0DAAyB;QAAzB,8HAAyB;QACzB,0DAA+B;QAA/B,oIAA+B;QAuBxD,0DAAmB;QAAnB,gFAAmB;;6FDdzB,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;AEnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACe;AACA;AACT;AACK;AACV;;AAiBnC,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,EAAE,YAPJ;YACP,uEAAa;YACb,oEAAgB;YAChB,qEAAgB;YAChB,iEAAe;YACf,uDAAU;SACX;mIAIU,SAAS,mBAZlB,2DAAY,aAGZ,uEAAa;QACb,oEAAgB;QAChB,qEAAgB;QAChB,iEAAe;QACf,uDAAU;6FAKD,SAAS;cAdrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;iBACb;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,oEAAgB;oBAChB,qEAAgB;oBAChB,iEAAe;oBACf,uDAAU;iBACX;gBACD,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;ACtBD;AAAA;AAAA;AAAA;AAAqD;;;AAS9C,MAAM,gBAAgB;IAI3B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAFpC,WAAM,GAAG,2DAA2D,CAAC;IAE7B,CAAC;IAEzC,KAAK;QACH,MAAM,IAAI,GAAG,gBAAgB,CAAC;QAC9B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAQ,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,EAAE,EAAE;YACnD,OAAO,EAAE;gBACP,MAAM,EAAE,kBAAkB;aAC3B;SACF,CAAC,CAAC;IACL,CAAC;IAED,aAAa;IACb,gDAAgD;IAChD,IAAI;IAEJ,MAAM,CAAC,OAAQ;QACb,MAAM,IAAI,GAAG,iBAAiB,CAAC;QAC/B,MAAM,WAAW,GAAG,QAAQ,OAAO,EAAE,CAAC;QACtC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,EAAE,EAAE;YACpD,OAAO,EAAE;gBACP,MAAM,EAAE,kBAAkB;aAC3B;SACF,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB;IACtB,UAAU,CAAC,IAAK;QAEd,IAAI,IAAI,GAAG,qBAAqB,CAAC;QACjC,IAAI,IAAI,EAAE;YACR,IAAI,GAAG,4BAA4B,IAAI,qBAAqB,CAAC;SAC9D;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAE;YAC7C,OAAO,EAAE;gBACP,MAAM,EAAE,kBAAkB;aAC3B;SACF,CAAC,CAAC;IACL,CAAC;;gFAzCU,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB,mBAJf,MAAM;6FAIP,gBAAgB;cAL5B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACND;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { CoronaApiService } from './services/corona-api.service';\nimport { Brief, Unit } from './models/api-model';\nimport { TreeNode } from 'primeng/api';\n\n\ndeclare var Plotly: any;\n// export interface TreeNode {\n//   data?: any;\n//   children?: TreeNode[];\n//   leaf?: boolean;\n//   expanded?: boolean;\n// }\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'corona-live';\n\n  brief: Brief;\n  lastest: Unit[];\n\n  valueTree: TreeNode[] = [{\n    data: {\n      countryregion: 'Countres', recovered: '', deaths: '', confirmed: ''\n    },\n    label: 'root',\n    children: [],\n    expanded: true\n  }];\n\n  selectedNode;\n\n  sample: TreeNode[] = [];\n\n  constructor(private coronaApi: CoronaApiService) { }\n\n\n  public findCountryInTree(tree: TreeNode[], id: string): TreeNode {\n    for (const node of tree) {\n      if ((node.data as Unit).countryregion === id) {\n        return node;\n      } else {\n        if (node.children && node.children.length > 0) {\n          const result = this.findCountryInTree(node.children, id);\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n\n  ngOnInit() {\n    this.coronaApi.brief().subscribe((brief: Brief) => {\n      console.log(brief);\n      this.brief = brief;\n    });\n\n\n    let prev = [];\n    this.coronaApi.timeseries().subscribe((result: any[]) => {\n\n      prev = result.map(country => {\n        let lastDate = 0;\n        let prevDate = 0;\n        let lastDateString;\n        let prevData;\n        let lastdata;\n        // tslint:disable-next-line:forin\n        for (const seriesEl in country.timeseries) {\n          const date1 = Date.parse(seriesEl);\n          if (date1 > lastDate) {\n            lastDate = date1;\n            prevDate = lastDate;\n            prevData = lastdata;\n            lastDateString = seriesEl;\n            lastdata = country.timeseries[seriesEl];\n            // console.log('last', lastDateString, lastdata);\n          }\n        }\n        return {\n          countryregion: country.countryregion,\n          data: prevData\n        };\n\n      });\n      // console.log('prev', prev);\n      this.coronaApi.latest().subscribe((values: Unit[]) => {\n\n        const countries: Unit[] = [];\n        const valuesRef = JSON.parse(JSON.stringify(values));\n        this.lastest = values.sort((a, b) => b.confirmed - a.confirmed);\n\n        for (let i = 0; i < this.lastest.length - 1; i++) {\n          const country = this.findCountryInTree(this.valueTree, this.lastest[i].countryregion);\n          if (country) {\n            const temp: TreeNode = {\n              data: {\n                countryregion: this.lastest[i].provincestate,\n                recovered: this.lastest[i].recovered,\n                deaths: this.lastest[i].deaths,\n                confirmed: this.lastest[i].confirmed\n              },\n              expanded: false,\n              label: this.lastest[i].countryregion,\n              children: []\n            };\n            country.children.push(temp);\n\n            // console.log(country.data);\n            country.data.confirmed += this.lastest[i].confirmed;\n            country.data.deaths += this.lastest[i].deaths;\n            country.data.recovered += this.lastest[i].recovered;\n          } else {\n            const element = JSON.parse(JSON.stringify(this.lastest[i]));\n\n            const inPrev = prev.find(c => c.countryregion === element.countryregion);\n\n            // countryregion: \"Thailand\"\n            // data:\n            // confirmed: 2\n            // deaths: 0\n            // recovered: 0\n\n            const temp: TreeNode = {\n              data: {\n                provincestate: element.provincestate,\n                countryregion: element.countryregion,\n                recovered: element.recovered,\n                deaths: element.deaths,\n                confirmed: element.confirmed,\n                countrycode: { ...element.countrycode },\n                prev: { ...inPrev.data }\n              },\n              expanded: false,\n              label: element.countryregion,\n              children: []\n            };\n            // console.log(temp);\n            this.valueTree[0].children.push(temp);\n          }\n        }\n        this.valueTree = this.valueTree[0].children;\n      });\n\n    });\n\n\n\n\n\n  }\n\n  nodeSelect(event) {\n\n    const country = event.node.data.countrycode.iso2;\n    console.log(country);\n    this.coronaApi.timeseries(country).subscribe(result => {\n      console.log(result);\n      const series = result[0].timeseries;\n      const confirmed = [];\n      const recovered = [];\n      const deaths = [];\n      const xAxis = [];\n      // tslint:disable-next-line: forin\n      for (const el in series) {\n        console.log(series[el], el);\n        confirmed.push(series[el].confirmed);\n        recovered.push(series[el].recovered);\n        deaths.push(series[el].deaths);\n        xAxis.push(el);\n        const elDate = Date.parse(el);\n      }\n      const plotEl = document.getElementById('history-plot');\n\n\n      const d = [{\n        x: xAxis,\n        y: confirmed,\n        type: 'scatter',\n        name: 'Confirmed',\n      }, {\n        x: xAxis,\n        y: recovered,\n        type: 'scatter',\n        name: 'Recovered'\n      },\n      {\n        x: xAxis,\n        y: deaths,\n        type: 'scatter',\n        name: 'Deaths',\n      }];\n\n      const layout = {\n        title: event.node.data.countryregion,\n        xaxis: {\n          title: 'Time',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: '#',\n          showline: false\n        }\n      };\n\n      const config = {\n        responsive: true,\n        displayModeBar: false\n      };\n\n      Plotly.newPlot(plotEl, d, layout, config);\n\n    });\n  }\n\n  nodeUnselect(event) {\n\n  }\n\n\n}\n","<div class=\"container-fluid bg-dark\">\n  <div class=\"row\">\n    <div class=\"col-12 mb-2\">\n      <div class=\"first-row\">\n        <div class=\"card\">\n          <div class=\"card-header bg-dark text-light\">\n            CORONA VIRUS OUTBREAK\n          </div>\n          <div class=\"card-body\">\n            <h6 class=\"card-subtitle mb-2\"> Confirmed Cases: {{brief?.confirmed}}</h6>\n            <h6 class=\"card-subtitle mb-2\"> Deaths: {{brief?.deaths}}</h6>\n            <h6 class=\"card-subtitle mb-2\"> Recovered: {{brief?.recovered}}</h6>\n          </div>\n        </div>\n\n        <div class=\"card plot\">\n          <div class=\"card-header bg-dark text-light\">\n            Click on a country to see historical trend\n          </div>\n\n          <div id=\"history-plot\">\n\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n\n\n    <router-outlet></router-outlet>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-12  mb-2\">\n      <p-treeTable [value]=\"valueTree\" selectionMode=\"single\" [(selection)]=\"selectedNode\" [autoLayout]=\"true\"\n        dataKey=\"countryregion\" (onNodeSelect)=\"nodeSelect($event)\" (onNodeUnselect)=\"nodeUnselect($event)\"\n        [scrollable]=\"true\" scrollHeight=\"600px\">\n        <ng-template pTemplate=\"header\">\n          <tr>\n            <th>Country</th>\n            <th>Total Confirmed</th>\n            <th>Total Recovered</th>\n            <th>Total Deaths</th>\n            <th>New confirmed</th>\n            <th>New recovered</th>\n            <th>New deaths</th>\n          </tr>\n        </ng-template>\n        <ng-template pTemplate=\"body\" let-rowNode let-rowData=\"rowData\">\n          <tr [ttSelectableRow]=\"rowNode\">\n            <td>\n              <p-treeTableToggler [rowNode]=\"rowNode\"></p-treeTableToggler>\n              {{rowData.countryregion}}\n            </td>\n            <td>{{rowData.confirmed}}</td>\n            <td>{{rowData.recovered}}</td>\n            <td>{{rowData.deaths}}</td>\n            <td>{{rowData.confirmed - rowData.prev?.confirmed}}</td>\n            <td>{{rowData.recovered - rowData.prev?.recovered}}</td>\n            <td>{{rowData.deaths - rowData.prev?.deaths}}</td>\n          </tr>\n        </ng-template>\n      </p-treeTable>\n    </div>\n  </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TreeTableModule } from 'primeng/treetable';\nimport { TreeModule } from 'primeng/tree';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    TreeTableModule,\n    TreeModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable, NgModule } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Brief, Unit } from '../models/api-model';\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class CoronaApiService {\n\n  server = 'https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai';\n\n  constructor(private http: HttpClient) { }\n\n  brief() {\n    const path = '/jhu-edu/brief';\n    return this.http.get<Brief>(`${this.server}${path}`, {\n      headers: {\n        accept: 'application/json'\n      }\n    });\n  }\n\n  // sample() {\n  //   return this.http.get('assets/sample.json');\n  // }\n\n  latest(country?) {\n    const path = '/jhu-edu/latest';\n    const countryCode = `iso2=${country}`;\n    return this.http.get<Unit[]>(`${this.server}${path}`, {\n      headers: {\n        accept: 'application/json'\n      }\n    });\n  }\n\n  // /jhu-edu/timeseries\n  timeseries(code?) {\n\n    let path = '/jhu-edu/timeseries';\n    if (code) {\n      path = `/jhu-edu/timeseries?iso2=${code}&onlyCountries=true`;\n    }\n    return this.http.get(`${this.server}${path} `, {\n      headers: {\n        accept: 'application/json'\n      }\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}