{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/services/corona-api.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","coronaApi","title","valueTree","data","countryregion","recovered","deaths","confirmed","label","children","expanded","sample","tree","node","length","result","findCountryInTree","brief","subscribe","console","log","timeseries","val","latest","values","countries","valuesRef","JSON","parse","stringify","lastest","i","country","temp","provincestate","push","element","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","CoronaApiService","http","server","path","get","headers","accept","countryCode","providedIn","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { CoronaApiService } from './services/corona-api.service';\nimport { Brief, LatestUnit } from './models/api-model';\nimport { TreeNode } from 'primeng/api';\n\n// export interface TreeNode {\n//   data?: any;\n//   children?: TreeNode[];\n//   leaf?: boolean;\n//   expanded?: boolean;\n// }\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'corona-live';\n\n  brief: Brief;\n  lastest: LatestUnit[];\n\n  valueTree: TreeNode[] = [{\n    data: {\n      countryregion: 'Countres', recovered: '', deaths: '', confirmed: ''\n    },\n    label: 'root',\n    children: [],\n    expanded: true\n  }];\n\n  valueTree2;\n\n  sample: TreeNode[] = [];\n\n  constructor(private coronaApi: CoronaApiService) { }\n\n\n  public findCountryInTree(tree: TreeNode[], id: string): TreeNode {\n    for (const node of tree) {\n      if ((node.data as LatestUnit).countryregion === id) {\n        return node;\n      } else {\n        if (node.children && node.children.length > 0) {\n          const result = this.findCountryInTree(node.children, id);\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n\n  ngOnInit() {\n    this.coronaApi.brief().subscribe((brief: Brief) => {\n      console.log(brief);\n      this.brief = brief;\n    });\n\n    this.coronaApi.timeseries().subscribe(val => {\n      console.log(val);\n    });\n    this.coronaApi.latest().subscribe((values: LatestUnit[]) => {\n      // console.log(values);\n      const countries: LatestUnit[] = [];\n      const valuesRef = JSON.parse(JSON.stringify(values));\n      this.lastest = values;\n      // this.lastest = values.slice(0, 10);\n\n      for (let i = 0; i < this.lastest.length - 1; i++) {\n        const country = this.findCountryInTree(this.valueTree, this.lastest[i].countryregion);\n        if (country) {\n          const temp: TreeNode = {\n            data: {\n              countryregion: this.lastest[i].provincestate,\n              recovered: this.lastest[i].recovered,\n              deaths: this.lastest[i].deaths,\n              confirmed: this.lastest[i].confirmed\n            },\n            expanded: false,\n            label: this.lastest[i].countryregion,\n            children: []\n          };\n          country.children.push(temp);\n\n          // console.log(country.data);\n          country.data.confirmed += this.lastest[i].confirmed;\n          country.data.deaths += this.lastest[i].deaths;\n          country.data.recovered += this.lastest[i].recovered;\n        } else {\n          const element = JSON.parse(JSON.stringify(this.lastest[i]));\n          const temp: TreeNode = {\n            data: {\n              provincestate: element.provincestate,\n              countryregion: element.countryregion,\n              recovered: element.recovered,\n              deaths: element.deaths,\n              confirmed: element.confirmed\n            },\n            expanded: true,\n            label: element.countryregion,\n            children: []\n          };\n          this.valueTree[0].children.push(temp);\n        }\n      }\n      this.valueTree = this.valueTree[0].children;\n      // setTimeout(() => {\n      //   this.valueTree = Object.assign({}, this.valueTree);\n      // }, 1);\n      // console.log(JSON.stringify(this.valueTree));\n    });\n\n\n    // this.coronaApi.sample().subscribe((val: any) => {\n    //   console.log(val);\n    //   this.sample = val.data;\n    //   console.log(JSON.stringify(this.sample));\n    // });\n\n\n  }\n\n\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n\n    <div class=\"col-6 mb-2\">\n      <div class=\"card\">\n        <div class=\"card-header bg-dark text-light\">\n          CORONA VIRUS OUTBREAK\n        </div>\n        <div class=\"card-body\">\n          <h6 class=\"card-subtitle mb-2\"> Confirmed Cases: {{brief?.confirmed}}</h6>\n          <h6 class=\"card-subtitle mb-2\"> Deaths: {{brief?.deaths}}</h6>\n          <h6 class=\"card-subtitle mb-2\"> Recovered: {{brief?.recovered}}</h6>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-6  mb-2\">\n      <p-treeTable [value]=\"valueTree\">\n        <ng-template pTemplate=\"header\">\n          <tr>\n            <th>country</th>\n            <th>confirmed</th>\n            <th>recovered</th>\n            <th>deaths</th>\n          </tr>\n        </ng-template>\n        <ng-template pTemplate=\"body\" let-rowNode let-rowData=\"rowData\">\n          <tr>\n            <td>\n              <p-treeTableToggler [rowNode]=\"rowNode\"></p-treeTableToggler>\n              {{rowData.countryregion}}\n            </td>\n            <td>{{rowData.confirmed}}</td>\n            <td>{{rowData.recovered}}</td>\n            <td>{{rowData.deaths}}</td>\n          </tr>\n        </ng-template>\n      </p-treeTable>\n    </div>\n  </div>\n  <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TreeTableModule } from 'primeng/treetable';\nimport { TreeModule } from 'primeng/tree';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    TreeTableModule,\n    TreeModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable, NgModule } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Brief, LatestUnit } from '../models/api-model';\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class CoronaApiService {\n\n  server = 'https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai';\n\n  constructor(private http: HttpClient) { }\n\n  brief() {\n    const path = '/jhu-edu/brief';\n    return this.http.get<Brief>(`${this.server}${path}`, {\n      headers: {\n        accept: 'application/json'\n      }\n    });\n  }\n\n  // sample() {\n  //   return this.http.get('assets/sample.json');\n  // }\n\n  latest(country?) {\n    const path = '/jhu-edu/latest';\n    const countryCode = `iso2=${country}`;\n    return this.http.get<LatestUnit[]>(`${this.server}${path}`, {\n      headers: {\n        accept: 'application/json'\n      }\n    });\n  }\n\n  // /jhu-edu/timeseries\n  timeseries() {\n    const path = '/jhu-edu/timeseries';\n    return this.http.get(`${this.server}${path} `, {\n      headers: {\n        accept: 'application/json'\n      }\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}