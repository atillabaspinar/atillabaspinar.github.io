{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/services/corona-api.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","coronaApi","title","valueTree","data","countryregion","recovered","deaths","confirmed","label","children","expanded","sample","tree","node","length","result","findCountryInTree","brief","subscribe","console","log","prev","timeseries","map","country","lastDate","prevDate","lastDateString","prevData","lastdata","seriesEl","date1","Date","parse","latest","values","countries","valuesRef","JSON","stringify","lastest","sort","a","b","i","temp","provincestate","push","element","inPrev","find","c","countrycode","event","iso2","series","xAxis","el","elDate","plotEl","document","getElementById","d","x","y","type","name","layout","xaxis","showgrid","zeroline","yaxis","showline","config","responsive","displayModeBar","Plotly","newPlot","nodeSelect","nodeUnselect","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","CoronaApiService","http","server","path","get","headers","accept","countryCode","providedIn","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { CoronaApiService } from './services/corona-api.service';\nimport { Brief, Unit } from './models/api-model';\nimport { TreeNode } from 'primeng/api';\n\n\ndeclare var Plotly: any;\n// export interface TreeNode {\n//   data?: any;\n//   children?: TreeNode[];\n//   leaf?: boolean;\n//   expanded?: boolean;\n// }\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'corona-live';\n\n  brief: Brief;\n  lastest: Unit[];\n\n  valueTree: TreeNode[] = [{\n    data: {\n      countryregion: 'Countres', recovered: '', deaths: '', confirmed: ''\n    },\n    label: 'root',\n    children: [],\n    expanded: true\n  }];\n\n  selectedNode;\n\n  sample: TreeNode[] = [];\n\n  constructor(private coronaApi: CoronaApiService) { }\n\n\n  public findCountryInTree(tree: TreeNode[], id: string): TreeNode {\n    for (const node of tree) {\n      if ((node.data as Unit).countryregion === id) {\n        return node;\n      } else {\n        if (node.children && node.children.length > 0) {\n          const result = this.findCountryInTree(node.children, id);\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n\n  ngOnInit() {\n    this.coronaApi.brief().subscribe((brief: Brief) => {\n      console.log(brief);\n      this.brief = brief;\n    });\n\n\n    let prev = [];\n    this.coronaApi.timeseries().subscribe((result: any[]) => {\n\n      prev = result.map(country => {\n        let lastDate = 0;\n        let prevDate = 0;\n        let lastDateString;\n        let prevData;\n        let lastdata;\n        // tslint:disable-next-line:forin\n        for (const seriesEl in country.timeseries) {\n          const date1 = Date.parse(seriesEl);\n          if (date1 > lastDate) {\n            lastDate = date1;\n            prevDate = lastDate;\n            prevData = lastdata;\n            lastDateString = seriesEl;\n            lastdata = country.timeseries[seriesEl];\n            // console.log('last', lastDateString, lastdata);\n          }\n        }\n        return {\n          countryregion: country.countryregion,\n          data: prevData\n        };\n\n      });\n      // console.log('prev', prev);\n      this.coronaApi.latest().subscribe((values: Unit[]) => {\n\n        const countries: Unit[] = [];\n        const valuesRef = JSON.parse(JSON.stringify(values));\n        this.lastest = values.sort((a, b) => b.confirmed - a.confirmed);\n\n        for (let i = 0; i < this.lastest.length - 1; i++) {\n          const country = this.findCountryInTree(this.valueTree, this.lastest[i].countryregion);\n          if (country) {\n            const temp: TreeNode = {\n              data: {\n                countryregion: this.lastest[i].provincestate,\n                recovered: this.lastest[i].recovered,\n                deaths: this.lastest[i].deaths,\n                confirmed: this.lastest[i].confirmed\n              },\n              expanded: false,\n              label: this.lastest[i].countryregion,\n              children: []\n            };\n            country.children.push(temp);\n\n            // console.log(country.data);\n            country.data.confirmed += this.lastest[i].confirmed;\n            country.data.deaths += this.lastest[i].deaths;\n            country.data.recovered += this.lastest[i].recovered;\n          } else {\n            const element = JSON.parse(JSON.stringify(this.lastest[i]));\n\n            const inPrev = prev.find(c => c.countryregion === element.countryregion);\n\n            // countryregion: \"Thailand\"\n            // data:\n            // confirmed: 2\n            // deaths: 0\n            // recovered: 0\n\n            const temp: TreeNode = {\n              data: {\n                provincestate: element.provincestate,\n                countryregion: element.countryregion,\n                recovered: element.recovered,\n                deaths: element.deaths,\n                confirmed: element.confirmed,\n                countrycode: { ...element.countrycode },\n                prev: { ...inPrev.data }\n              },\n              expanded: false,\n              label: element.countryregion,\n              children: []\n            };\n            // console.log(temp);\n            this.valueTree[0].children.push(temp);\n          }\n        }\n        this.valueTree = this.valueTree[0].children;\n      });\n\n    });\n\n\n\n\n\n  }\n\n  nodeSelect(event) {\n\n    const country = event.node.data.countrycode.iso2;\n    console.log(country);\n    this.coronaApi.timeseries(country).subscribe(result => {\n      console.log(result);\n      const series = result[0].timeseries;\n      const confirmed = [];\n      const recovered = [];\n      const deaths = [];\n      const xAxis = [];\n      // tslint:disable-next-line: forin\n      for (const el in series) {\n        console.log(series[el], el);\n        confirmed.push(series[el].confirmed);\n        recovered.push(series[el].recovered);\n        deaths.push(series[el].deaths);\n        xAxis.push(el);\n        const elDate = Date.parse(el);\n      }\n      const plotEl = document.getElementById('history-plot');\n\n\n      const d = [{\n        x: xAxis,\n        y: confirmed,\n        type: 'scatter',\n        name: 'Confirmed',\n      }, {\n        x: xAxis,\n        y: recovered,\n        type: 'scatter',\n        name: 'Recovered'\n      },\n      {\n        x: xAxis,\n        y: deaths,\n        type: 'scatter',\n        name: 'Deaths',\n      }];\n\n      const layout = {\n        title: event.node.data.countryregion,\n        xaxis: {\n          title: 'Time',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: '#',\n          showline: false\n        }\n      };\n\n      const config = {\n        responsive: true,\n        displayModeBar: false\n      };\n\n      Plotly.newPlot(plotEl, d, layout, config);\n\n    });\n  }\n\n  nodeUnselect(event) {\n\n  }\n\n\n}\n","<div class=\"container-fluid bg-dark\">\n  <div class=\"row\">\n    <div class=\"col-12 mb-2\">\n      <div class=\"first-row\">\n        <div class=\"card\">\n          <div class=\"card-header bg-dark text-light\">\n            CORONA VIRUS OUTBREAK\n          </div>\n          <div class=\"card-body\">\n            <h6 class=\"card-subtitle mb-2\"> Confirmed Cases: {{brief?.confirmed}}</h6>\n            <h6 class=\"card-subtitle mb-2\"> Deaths: {{brief?.deaths}}</h6>\n            <h6 class=\"card-subtitle mb-2\"> Recovered: {{brief?.recovered}}</h6>\n          </div>\n        </div>\n\n        <div class=\"card plot\">\n          <div class=\"card-header bg-dark text-light\">\n            Click on a country to see historical trend\n          </div>\n\n          <div id=\"history-plot\">\n\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n\n\n    <router-outlet></router-outlet>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-12  mb-2\">\n      <p-treeTable [value]=\"valueTree\" selectionMode=\"single\" [(selection)]=\"selectedNode\" [autoLayout]=\"true\"\n        dataKey=\"countryregion\" (onNodeSelect)=\"nodeSelect($event)\" (onNodeUnselect)=\"nodeUnselect($event)\"\n        [scrollable]=\"true\" scrollHeight=\"600px\">\n        <ng-template pTemplate=\"header\">\n          <tr>\n            <th>Country</th>\n            <th>Total Confirmed</th>\n            <th>Total Recovered</th>\n            <th>Total Deaths</th>\n            <th>New confirmed</th>\n            <th>New recovered</th>\n            <th>New deaths</th>\n          </tr>\n        </ng-template>\n        <ng-template pTemplate=\"body\" let-rowNode let-rowData=\"rowData\">\n          <tr [ttSelectableRow]=\"rowNode\">\n            <td>\n              <p-treeTableToggler [rowNode]=\"rowNode\"></p-treeTableToggler>\n              {{rowData.countryregion}}\n            </td>\n            <td>{{rowData.confirmed}}</td>\n            <td>{{rowData.recovered}}</td>\n            <td>{{rowData.deaths}}</td>\n            <td>{{rowData.confirmed - rowData.prev?.confirmed}}</td>\n            <td>{{rowData.recovered - rowData.prev?.recovered}}</td>\n            <td>{{rowData.deaths - rowData.prev?.deaths}}</td>\n          </tr>\n        </ng-template>\n      </p-treeTable>\n    </div>\n  </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TreeTableModule } from 'primeng/treetable';\nimport { TreeModule } from 'primeng/tree';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    TreeTableModule,\n    TreeModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable, NgModule } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Brief, Unit } from '../models/api-model';\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class CoronaApiService {\n\n  server = 'https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai';\n\n  constructor(private http: HttpClient) { }\n\n  brief() {\n    const path = '/jhu-edu/brief';\n    return this.http.get<Brief>(`${this.server}${path}`, {\n      headers: {\n        accept: 'application/json'\n      }\n    });\n  }\n\n  // sample() {\n  //   return this.http.get('assets/sample.json');\n  // }\n\n  latest(country?) {\n    const path = '/jhu-edu/latest';\n    const countryCode = `iso2=${country}`;\n    return this.http.get<Unit[]>(`${this.server}${path}`, {\n      headers: {\n        accept: 'application/json'\n      }\n    });\n  }\n\n  // /jhu-edu/timeseries\n  timeseries(code?) {\n\n    let path = '/jhu-edu/timeseries';\n    if (code) {\n      path = `/jhu-edu/timeseries?iso2=${code}&onlyCountries=true`;\n    }\n    return this.http.get(`${this.server}${path} `, {\n      headers: {\n        accept: 'application/json'\n      }\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}